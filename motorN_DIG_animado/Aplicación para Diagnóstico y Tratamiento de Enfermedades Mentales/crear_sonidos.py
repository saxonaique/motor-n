import numpy as np
import scipy.io.wavfile as wav

# ConfiguraciÃ³n de audio
TASA_MUESTREO = 44100  # Hz (calidad CD)
DURACION = 5  # segundos

# FunciÃ³n para generar la seÃ±al de depresiÃ³n
def generar_eeg_depresivo(duracion, tasa_muestreo):
    """
    Genera una seÃ±al que simula un estado de depresiÃ³n:
    - Dominio de ondas lentas (Theta/Delta: 1-8 Hz)
    - Baja variabilidad, patrones repetitivos
    - Poca actividad de alta frecuencia (ruido)
    """
    t = np.linspace(0, duracion, int(duracion * tasa_muestreo), False)
    
    # Componente principal: ondas lentas (depresiÃ³n)
    seÃ±al_lenta = 0.7 * np.sin(2 * np.pi * 3 * t)  # 3 Hz (Delta)
    seÃ±al_lenta += 0.5 * np.sin(2 * np.pi * 6 * t)  # 6 Hz (Theta)
    
    # Ruido muy bajo para simular rigidez
    ruido = 0.1 * np.random.normal(0, 1, len(t))
    
    # Sin modulaciÃ³n de amplitud para simular falta de flexibilidad
    
    seÃ±al_depresiva = seÃ±al_lenta + ruido
    
    # Asegurar que la seÃ±al no exceda los lÃ­mites antes de normalizar
    seÃ±al_depresiva = np.clip(seÃ±al_depresiva, -1.0, 1.0)
    
    return seÃ±al_depresiva

# FunciÃ³n para crear la contraonda para la depresiÃ³n
def crear_contraonda_depresion(seÃ±al_original, tasa_muestreo):
    """
    Crea una contraonda para la depresiÃ³n:
    - Introduce variabilidad y complejidad
    - Componentes de frecuencias mÃ¡s rÃ¡pidas (Beta/Gamma) para activar/flexibilizar
    - Un tono audible para asegurar la percepciÃ³n
    """
    t = np.linspace(0, DURACION, int(DURACION * tasa_muestreo), False)
    
    # Tono puro audible para asegurar la audibilidad
    tono_puro = 0.6 * np.sin(2 * np.pi * 440 * t) # 440 Hz (La 4)
    
    # Componentes de alta frecuencia para activar/flexibilizar
    activacion_beta = 0.3 * np.sin(2 * np.pi * 25 * t) # 25 Hz (Beta)
    activacion_gamma = 0.2 * np.sin(2 * np.pi * 50 * t) # 50 Hz (Gamma)
    
    # Ruido blanco atenuado para introducir complejidad y romper patrones
    ruido_activador = 0.1 * np.random.normal(0, 1, len(t))
    
    contraonda = tono_puro + activacion_beta + activacion_gamma + ruido_activador
    
    # Normalizar la contraonda para asegurar que use todo el rango dinÃ¡mico
    contraonda = contraonda / np.max(np.abs(contraonda)) if np.max(np.abs(contraonda)) > 0 else contraonda
    
    return contraonda

# Generar la seÃ±al de depresiÃ³n
print("Generando seÃ±al de depresiÃ³n (baja entropÃ­a funcional)...")
seÃ±al_depresiva = generar_eeg_depresivo(DURACION, TASA_MUESTREO)

# Normalizar y convertir a formato de audio
seÃ±al_normalizada = seÃ±al_depresiva / np.max(np.abs(seÃ±al_depresiva)) if np.max(np.abs(seÃ±al_depresiva)) > 0 else seÃ±al_depresiva
seÃ±al_int16 = (seÃ±al_normalizada * 32767).astype(np.int16)

# Guardar el archivo de entrada
wav.write("1_entrada_simulada_depresion.wav", TASA_MUESTREO, seÃ±al_int16)
print("âœ“ Archivo \'1_entrada_simulada_depresion.wav\' creado.")

# Generar la contraonda para la depresiÃ³n
print("Generando contraonda para la depresiÃ³n (alta entropÃ­a funcional controlada)...")
contraonda = crear_contraonda_depresion(seÃ±al_depresiva, TASA_MUESTREO)

# Normalizar y convertir a formato de audio
contraonda_normalizada = contraonda / np.max(np.abs(contraonda)) if np.max(np.abs(contraonda)) > 0 else contraonda
contraonda_int16 = (contraonda_normalizada * 32767).astype(np.int16)

# Guardar el archivo de contraonda
wav.write("2_contraonda_depresion_activadora.wav", TASA_MUESTREO, contraonda_int16)
print("âœ“ Archivo \'2_contraonda_depresion_activadora.wav\' creado.")

print("\nðŸŽµ Archivos de audio generados exitosamente.")
print("Puedes escuchar ambos archivos para comparar:")
print("- \'1_entrada_simulada_depresion.wav\': Sonido lento y repetitivo (depresiÃ³n)")
print("- \'2_contraonda_depresion_activadora.wav\': Sonido mÃ¡s complejo y activador")

